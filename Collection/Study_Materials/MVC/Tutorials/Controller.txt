ASP.NET MVC Controller:
-------------------------

MVC Controllers are responsible for responding to requests made against an ASP.NET MVC website. Each browser request is mapped to a particular controller.

The Controller might return a particular view back to the browser or the controller might redirect the user to another controller.

1. Understanding Controller Actions:
--------------------------------------

A controller exposes controller actions. An action is a method on a controller that gets called when you enter a particular URL in your browser address bar.

A controller action must be a public method of a controller class. Realize that any public method that you add to a controller class is exposed as a controller action automatically. 

There are some additional requirements that must be satisfied by a controller action. A method used as a controller action cannot be overloaded. 

In order to be exposed to the universe as an action, a method must meet certain requirements:

 - The method must be public.
 - The method cannot be a static method.
 - The method cannot be an extension method.
 - The method cannot be a constructor, getter or setter
 - The method cannot have open generic types.
 - The method is not a method of the controller base class.
 - The method cannot contain ref or out parameters.

There are no restrictions on the return type of a controller action. A controller action can return anything or void. 

The ASP.NET MVC framework will convert any return type that is not an action result into a string and render the string to the browser.


2.Understanding Action Results
---------------------------------

A controller action returns something called an action result. An action result is what a controller action returns in response to a browser request.

The ASP.NET MVC framework supports several types of action results including:

1. ViewResult - Represents HTML and markup
2. EmptyResult - Represents no result.
3. RedirectResult - Represents a redirection to a new URL.
4. JsonResult - Represents a JavaScript Objecti Notation result that can be used in an AJAX application
5. JavaScriptResult - Represents a JavaScript script.
6. ContentResult - Represents a text result.
7. FileContentResult - Represents a downloadable file (with the binary content)
8. FilePathResult - Represents a downloadable file (with a path)
9. FileStreamResult - Represents a downloadable file (with a file stream)

All of these action results inherit from the base ActionResult class.

Noramlly, you do not return an action result directly. Instead, you call one of the following methods of the Controller base class:

1. View - Returns a ViewResult action result.

2. Redirect - Returns a RedirectResult action result.

3. RedirectToAction - Returns a RedirectToRouteResult action result.

4. RedirectToRoute - Returns a RedirectToRouteResult action result.

5. Json - Returns a JsonResult action result.

6. JavaScriptResult - Returns a JavaScriptResult.

7. Content - Returns a ContentResult action result.

8. File - Returns a FileContentResult, FilePathResult,  or FileStreamResult depending on the parameters passed to the method.


Preventing a Public Method from Being Invoked:
--------------------------------------------------
If you need to create a public method in a controller class and you don't want to expose the method as a controller action then you can prevent the method form being invoked by usi\ng the [NonAction] attribute.



