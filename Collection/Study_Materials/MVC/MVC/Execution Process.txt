Model:

 - MVC model is basically a C# or VB.NET class.

 - A model is accessible by both "controller" and "view".

 - A model can be used to pass data from "controller" to "view" .

 - A "view" can use model to display data in page.

View:

 - View is an ASPX page without having a code behind file.

 - All page specific HTML generation and formatting can be done inside view.

 - One can use Inline code (server tags) to develop dynamic pages.

 - A request to "view" (ASPX page) can be made only from a controller's action method.

Controller:

 - "Controller" is a heart of the entire MVC architecture.

 - Controller is basically a C# or VB.NET class which inherits System.Web.Mvc.Controller.

 - Inside Controller's class action methods can be implemented which are responsible for responding to browser or calling views.

 - Controller can access and use model class to pass data to views.

 - Controller uses ViewData to pass any data to view.

MVC Applicaiton Excecution Process:
--------------------------------------

 - Request to an ASP.NET MVC-based Web applicaiton first pass through the "UrlRoutingModule" object, which is an HTTP module.
	- This module parses the request and performs route selection.

 - The "UrlRoutingModule" object selects the first route object that matches the current request. (A route object is a class that implements RouteBase, and is typically an instance of the "Route" class)

 - If no routes match, the "UrlRoutingModule" object does nothing and lets the request fall back to the regular ASP.NET or IIS request processing.

 - From the selected Route object,  the UrlRoutingModule object obtains the IRouteHandler object that is associated with the Route object. Typically, in an MVC application, this will be an instance of MVCRouteHandler.

- The "IRouteHandler" instance creates an IHttpHandler object and passes it the IHttpContext object. By default, the "IHttpHandler" instance for MVC is the "MvcHandler" object which then selects the controller that will ultimately handle the request.

 - The module and handler are entry point to the ASP.NET MVC framework. They perform the following actions:

	1. Select the appropriate controller in an MVC Web application.

	2. Obtain a specific controller instance.

	3. Call the controller's Execute method.

 - The stages of execution for an MVC Web project.

1. Receive first request for the application.

 - In the Global.asax file, "Route" objects are added to the "RouteTable" object.

2. Perform routing.

 - The UrlRoutingMoudle module uses the first matching Route object in the RouteTable collection to create RouteData object, which it then uses to creat a RequestContext (IHttpContext) object.

3. Create MVC request handler.

 - The "MvcRouteHandler" object creates an instance of the MvcHandler class and pass it the RequestContext instance.

4. Create Controller

 - The MvcHandler object uses the RequestContext instance to identify the IControllerFactory object (typically an instance of the DefaultControllerFactory class) to create the controller instance with.

5. Execute Controller

 - The MvcHandler instance calls the controller's Execute method.

6. Invoke action

 - Most controllers inhert from the Controller base class. The ControllerActionInvoker object that is associated with the controller determines which action method of the controller class to call, and then calls that method.

7. Execute result

 - A typical action method might receive user input, prepare the appropriate response data, and then execute the result by returning a result type.

 - The built-in result types that can be executed include the following: ViewResult, RedirectToRouteResult, RedirectResult, ContentResult, JsonResult, and EmptyResult.



	